{"version":3,"sources":["Home.js","Weather.js","App.js","serviceWorker.js","index.js"],"names":["Home","react_default","a","createElement","className","Day","props","period","name","temperature","temperatureUnit","shortForecast","detailedForecast","Weather","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","forecast","error","loadWeather","_this2","fetch","then","response","ok","json","Promise","reject","weatherData","setState","properties","catch","content","periods","map","key","number","React","Component","App","BrowserRouter","Link","to","Route","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d87f0a6d.chunk.js","sourcesContent":["import React from 'react';\n\nexport default () => (\n  <div className=\"container mt-3\">\n    <div className=\"row\">\n      <div className=\"col\">\n        <h1>Welcome to my React Plaground</h1>\n        <p>Click the links on the left to explore</p>\n      </div>\n    </div>\n  </div>\n)","import React from 'react';\n\nfunction Day(props) {\n  return (\n    <div className=\"card mb-1\">\n      <div className=\"card-body\">\n        <h5 className=\"card-title\">{props.period.name}</h5>\n        <h6 className=\"card-subtitle mb-2 text-muted\">\n          <span>{props.period.temperature}Â°{props.period.temperatureUnit}</span> <span>{props.period.shortForecast}</span>\n        </h6>\n        <p className=\"card-text\">{props.period.detailedForecast}</p>\n      </div>\n    </div>\n  )\n}\n\nexport default class Weather extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      forecast: null,\n      error: null\n    }\n    this.loadWeather()\n  }\n\n  loadWeather() {\n    fetch('https://api.weather.gov/gridpoints/IND/57,68/forecast')\n      .then(response => {\n        if(response.ok) {\n          return response.json()\n        } else {\n          return Promise.reject(response);\n        }\n      })\n      .then(weatherData => this.setState({forecast: weatherData.properties}))\n      .catch(error => this.setState({error: 'Error loading weather data'}));\n  }\n\n  render() {\n\n    let content;\n\n    if(this.state.error) {\n      content = <div>{this.state.error}</div>\n    } else if(!this.state.forecast) {\n      content = <div>Loading</div>\n    } else {\n      content = (\n        <div>\n          { this.state.forecast.periods.map(period => {\n            return <Day period={period} key={period.number}/>\n          }) }\n        </div>\n      );\n    }\n\n    return (\n      <div>\n        <h1 className=\"m-3\">Weather Forecast for Indianapolis, IN</h1>\n        { content }\n      </div>\n    )\n  }\n}","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport './App.css';\nimport Home from './Home';\nimport Weather from './Weather';\n\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n      <div>\n        <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\n          <Link className=\"navbar-brand\" to=\"/\">React Playground</Link>\n        </nav>\n        <div className=\"container-fluid\">\n          <div className=\"row\">\n            <div className=\"col-2 bg-light min-vh-100\">\n              <ul className=\"nav flex-column mt-3\">\n                <li className=\"nav-item\">\n                  <Link className=\"nav-link active text-dark\" to=\"/weather\">Weather</Link>\n                </li>\n              </ul>\n            </div>\n            <div className=\"col-10\">\n              <Route path=\"/\" exact component={Home} />\n              <Route path=\"/weather\" component={Weather} />\n            </div>\n          </div>\n        </div>\n      </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}